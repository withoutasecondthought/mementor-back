// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	mementor_back "mementor-back"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMentor is a mock of Mentor interface.
type MockMentor struct {
	ctrl     *gomock.Controller
	recorder *MockMentorMockRecorder
}

// MockMentorMockRecorder is the mock recorder for MockMentor.
type MockMentorMockRecorder struct {
	mock *MockMentor
}

// NewMockMentor creates a new mock instance.
func NewMockMentor(ctrl *gomock.Controller) *MockMentor {
	mock := &MockMentor{ctrl: ctrl}
	mock.recorder = &MockMentorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMentor) EXPECT() *MockMentorMockRecorder {
	return m.recorder
}

// DeleteMentor mocks base method.
func (m *MockMentor) DeleteMentor(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMentor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMentor indicates an expected call of DeleteMentor.
func (mr *MockMentorMockRecorder) DeleteMentor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMentor", reflect.TypeOf((*MockMentor)(nil).DeleteMentor), ctx, id)
}

// GetMentor mocks base method.
func (m *MockMentor) GetMentor(ctx context.Context, id string) (mementor_back.MentorFullInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMentor", ctx, id)
	ret0, _ := ret[0].(mementor_back.MentorFullInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMentor indicates an expected call of GetMentor.
func (mr *MockMentorMockRecorder) GetMentor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMentor", reflect.TypeOf((*MockMentor)(nil).GetMentor), ctx, id)
}

// GetMyMentor mocks base method.
func (m *MockMentor) GetMyMentor(ctx context.Context, id string) (mementor_back.MentorFullInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyMentor", ctx, id)
	ret0, _ := ret[0].(mementor_back.MentorFullInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyMentor indicates an expected call of GetMyMentor.
func (mr *MockMentorMockRecorder) GetMyMentor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyMentor", reflect.TypeOf((*MockMentor)(nil).GetMyMentor), ctx, id)
}

// ListOfMentors mocks base method.
func (m *MockMentor) ListOfMentors(ctx context.Context, page uint, params mementor_back.SearchParameters) (mementor_back.ListOfMentorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfMentors", ctx, page, params)
	ret0, _ := ret[0].(mementor_back.ListOfMentorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfMentors indicates an expected call of ListOfMentors.
func (mr *MockMentorMockRecorder) ListOfMentors(ctx, page, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfMentors", reflect.TypeOf((*MockMentor)(nil).ListOfMentors), ctx, page, params)
}

// PutMentor mocks base method.
func (m *MockMentor) PutMentor(ctx context.Context, mentor mementor_back.MentorFullInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMentor", ctx, mentor)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMentor indicates an expected call of PutMentor.
func (mr *MockMentorMockRecorder) PutMentor(ctx, mentor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMentor", reflect.TypeOf((*MockMentor)(nil).PutMentor), ctx, mentor)
}

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(ctx context.Context, user mementor_back.Auth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), ctx, user)
}

// SignUp mocks base method.
func (m *MockAuthorization) SignUp(ctx context.Context, user mementor_back.Auth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthorizationMockRecorder) SignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorization)(nil).SignUp), ctx, user)
}

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// NewBooking mocks base method.
func (m *MockBook) NewBooking(ctx context.Context, booking mementor_back.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBooking", ctx, booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewBooking indicates an expected call of NewBooking.
func (mr *MockBookMockRecorder) NewBooking(ctx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBooking", reflect.TypeOf((*MockBook)(nil).NewBooking), ctx, booking)
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// NewImage mocks base method.
func (m *MockImage) NewImage(ctx context.Context, image mementor_back.PostImage) (mementor_back.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImage", ctx, image)
	ret0, _ := ret[0].(mementor_back.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewImage indicates an expected call of NewImage.
func (mr *MockImageMockRecorder) NewImage(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImage", reflect.TypeOf((*MockImage)(nil).NewImage), ctx, image)
}
